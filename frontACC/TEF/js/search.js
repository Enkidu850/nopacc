let search={state:{searchDiv:null,lastSearchString:"",autocompleteInitialized:!1,lastSGServer:null,searchURL:null,last:null,timeoutID:null,selectedAutoCompleteItem:null},init:function(){try{search.render(),$("#searchInputID").keypress(function(event){13===event.which&&search.doSearch()})}catch(err){application.errorHandling(err.message,0)}},render:function(){try{$("body").append(`
            <div id='searchMain' class='grid1 gridPadding' style="display:none">
            <table  class="w100 s9 tdPadding5"> 
            <tr>
                <td class="w100">
                    <input type="text" id="searchInputID" class="w100 inputautocomplete" value="" autocomplete="on" onkeyup="search.initAutoComplete();" placeholder="${Lang.search.searchPlaceholder}">
                </td>
                <td>
                    <button id="searchBtn" class=" ButtonMedium i18n " onclick="search.doSearch()"><img src="images/icons/search.svg"></button>
                </td>
            </tr>
            </table>
        </div>
            <div id="searchResultDiv" class="w100 h100" style="display:none">
            </div> `),$("body").append(`
            <div id='searchHelp' class='grid1 gridPadding' style="display:none">
            <div>${Lang.search.searchHelp}</div>
            <div>${Lang.search.searchHelpCoord}</div>
            <div>${Lang.search.searchHelpCoordExamples}</div>
            <div>
                -73.978051 W , 40.766229 N  <br>
                40.766229 N  , -73.978051 W <br>
                -73.978051W 40.766229N  <br>
                -73.978051 W / 40.766229 N<br>
                -73.978051 , 40.766229 <br>
                <br>
                WGS84 UTM 18N 586251.12 E , 4513308 N<br>
                UTM 18N 586251.12 E / 4513308 N<br>
                <br>
                WGS84 GEO -73.978051 E / 40.766229 N<br>
                GEO -73.978051 E / 40.766229 N<br>
                <br>
                EPSG:32618 586344E 4513206N <br>
                <br>
                MGRS: 17RQJ9035281062
            </div>
            
            </div> `)}catch(err){application.errorHandling(err.message,0)}},initAutoComplete:function(){try{search.fetchAutoComplete()}catch(err){application.errorHandling(err.message,0)}},fetchAutoComplete:function(){try{var searchString=$("#searchInputID").val();if(void 0!==searchString&&null!=searchString&&""!=searchString)if(1==search.searchLocation(searchString,!1))search.state.autocompleteInitialized=!1,$("#searchInputID").autocomplete({source:[]});else{let SGServices;if(application.state.connectedServer){var connectedServerDomain=application.state.connectedServer.toLowerCase().split("?")[0];SGServices=connectedServerDomain+"//SGServices.json"}else{let projectPath=application.state.projectPath;var projectPathSplit=projectPath.split("/projects");projectPath=projectPathSplit[0],SGServices=projectPath+"//SGServices.json"}null==search.state.lastSGServer||search.state.lastSGServer!=application.state.connectedServer||null==search.state.searchURL?$.ajax({url:SGServices,success:function(data){data.AddressSearch&&(search.state.lastSGServer=application.state.connectedServer,search.state.searchURL=data.AddressSearch[0].Value+"callback=fillAutoComplete&q=",search.searchAddress())},error:function(msg){search.state.lastSGServer=null,search.state.searchURL=null,application.errorHandling(msg.statusText,2)}}):search.searchAddress()}}catch(err){application.errorHandling(err.message,0)}},doSearch:function(){var LLCS,searchString=$("#searchInputID").val();"?"==searchString.trim()?panel.addAndShow(0,"searchHelp",Lang.search.searchHelpTitle,null,panel.state.widthSmall,panel.state.heightLarge,!1,0):1!=search.searchLocation(searchString,!0)&&(search.state.selectedAutoCompleteItem?application.state.isPlanar?(LLCS=SGWorld.CoordServices.CreateCoordinateSystem('GEOGCS["WGS84 Coordinate System",DATUM["WGS 1984",SPHEROID["WGS 1984",6378137,298.257223563],TOWGS84[0,0,0,0,0,0,0],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0],UNIT["degree",0.0174532925199433],AUTHORITY["EPSG","4326"],AUTHORITY["SBMG","LAT-LONG,LAT-LONG,WGS84,METERS"]]'),LLCS=SGWorld.CoordServices.Reproject(LLCS,SGWorld.Terrain.CoordinateSystem,search.state.selectedAutoCompleteItem.coord.Lon,search.state.selectedAutoCompleteItem.coord.Lat),navigate.flyToCoord(LLCS.X,LLCS.Y)):navigate.flyToCoord(search.state.selectedAutoCompleteItem.coord.Lon,search.state.selectedAutoCompleteItem.coord.Lat):$.ajax({url:search.state.searchURL+encodeURIComponent(searchString),success:function(data){var LLCS,data=search.parseDataFromResponse(data);search.state.lastSearchString==$("#searchInputID").val()&&(application.state.isPlanar?(LLCS=SGWorld.CoordServices.CreateCoordinateSystem('GEOGCS["WGS84 Coordinate System",DATUM["WGS 1984",SPHEROID["WGS 1984",6378137,298.257223563],TOWGS84[0,0,0,0,0,0,0],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0],UNIT["degree",0.0174532925199433],AUTHORITY["EPSG","4326"],AUTHORITY["SBMG","LAT-LONG,LAT-LONG,WGS84,METERS"]]'),LLCS=SGWorld.CoordServices.Reproject(LLCS,SGWorld.Terrain.CoordinateSystem,data[0].coord.Lon,data[0].coord.Lat),navigate.flyToCoord(LLCS.X,LLCS.Y)):navigate.flyToCoord(data[0].coord.Lon,data[0].coord.Lat))},error:function(msg){application.errorHandling(msg.statusText,2)}}))},searchAddress:function(){try{search.state.autocompleteInitialized||(search.state.autocompleteInitialized=!0,$("#searchInputID").autocomplete({source:function(request,response){search.state.lastSearchString=request.term;request=search.state.searchURL+encodeURIComponent(search.state.lastSearchString);$.ajax({url:request,success:function(data){data=search.parseDataFromResponse(data);response(data)},error:function(msg){application.errorHandling(msg.statusText,2),response()}})},autoFocus:!0,classes:{"ui-autocomplete":"autocomplete","ui-autocomplete-input":"inputautocomplete"},select:function(event,ui){event.preventDefault(),$("#searchInputID").val(ui.item.description),search.state.selectedAutoCompleteItem=ui.item,search.doSearch()}}).autocomplete("instance")._renderItem=function(ul,item){var prefix=search.longestCommonPrefix(item.label,search.state.lastSearchString);let splitArr,split;return splitArr=prefix?["",prefix,(split=item.label.split(prefix))[1]]:1==(split=1==(split=item.label.split(search.state.lastSearchString.charAt(0).toLowerCase()+search.state.lastSearchString.slice(1))).length?item.label.split(search.state.lastSearchString.charAt(0).toUpperCase()+search.state.lastSearchString.slice(1)):split).length?[item.label,"",""]:[split[0],search.state.lastSearchString,split[1]],$("<li>").append('<div class="autocompleteElement"><span>'+splitArr[0]+"<b>"+splitArr[1]+"</b>"+splitArr[2]+'</span><br><span class="autocompleteItemSmallFont">'+item.description+"</span></div>").appendTo(ul)})}catch(err){application.errorHandling(err.message,0)}},longestCommonPrefix:function(firstString,secondString){try{let i=0,commonPrefix="";for(;firstString.charAt(i).toLowerCase()===secondString.charAt(i).toLowerCase()&&i<firstString.length&&i<secondString.length;)commonPrefix+=firstString.charAt(i),i++;return commonPrefix}catch(err){application.errorHandling(err.message,0)}},parseDataFromResponse:function(data){try{let realData=data.split("fillAutoComplete(")[1];var end=realData.lastIndexOf(")");return realData=realData.slice(0,end),realData=(realData=(realData=JSON.parse(realData)).slice(0,5)).map(element=>({label:""+element.Name,description:""+element.Description,coord:{Lon:element.Lon,Lat:element.Lat}}))}catch(err){return application.errorHandling(err.message,0),null}},searchLocation:function(query,flyTo){try{let longitude=-1,latitude=-1;if(-1<(query=(query=settings.state.isFrenchLanguage?services.invertDotsCommas(query):query).toLowerCase()).indexOf("mgrs:")){if((query=query.replace(/ /g,"")).includes("mgrs:"),""==(query=query.split("mgrs:")[1]))return!0;var coord=SGWorld.CoordServices.ConvertMGRSToCoordinate(query);longitude=coord.X,latitude=coord.Y}else{var utmZone,hemisphere,coordsRegex,coordsMatch,coordSys=null,epsgNumber=null,projectCoordSys=SGWorld.Terrain.CoordinateSystem,utmRegex=/.*?utm\s?(\d+)([ns])/i,utmMatch=query.match(utmRegex),geoRegex=(utmMatch&&(utmZone=parseInt(utmMatch[1],10),hemisphere=utmMatch[2].toLowerCase(),query=query.replace(utmMatch[0],""),epsgNumber=("n"===hemisphere?32600:32700)+utmZone),/\bwgs84\s+geo\b/i),geoMatch=query.match(geoRegex),epsgRegex=(geoMatch&&(query=query.replace(geoMatch[0],""),epsgNumber=4326),/epsg:(\d+)/i),epsgMatch=query.match(epsgRegex),latRegex=(!epsgMatch||null==(epsgNumber=parseInt(epsgMatch[1]))||isNaN(epsgNumber)||(query=query.replace(epsgMatch[0],"")),null==epsgNumber||isNaN(epsgNumber)||(coordSys=SGWorld.CoordServices.CreateCoordinateSystem("")).InitFromEPSG(epsgNumber),/(-?\d+(\.\d+)?)\s*([ns])/),lonRegex=/(-?\d+(\.\d+)?)\s*([ew])/,latMatch=query.match(latRegex),lonMatch=query.match(lonRegex);latMatch&&lonMatch?(latitude=parseFloat(latMatch[1])*(0<latMatch[1]&&"s"===latMatch[3]?-1:1),longitude=parseFloat(lonMatch[1])*(0<lonMatch[1]&&"w"===lonMatch[3]?-1:1)):(coordsRegex=/^\s*(-?\d+(\.\d+)?)\s*[ ,\/]\s*(-?\d+(\.\d+)?)\s*$/,(coordsMatch=query.match(coordsRegex))&&(longitude=parseFloat(coordsMatch[1]),latitude=parseFloat(coordsMatch[3]),EPSG="project"))}if(-1==longitude||-1==latitude)return!1;if(null!=coordSys)try{let coord=SGWorld.CoordServices.Reproject(coordSys,projectCoordSys,longitude,latitude);longitude=coord.X,latitude=coord.Y}catch(err){return!0}return flyTo&&navigate.flyToCoord(longitude,latitude),!0}catch(err){return!1}},inputFromCord:function(MGRS){try{toolbox.selectTool("search",!0);let searchText="";var YSign,XSign,digits;searchText=MGRS?"MGRS: "+SGWorld.CoordServices.ConvertCoordinateToMGRS(application.state.statusBarX,application.state.statusBarY):(YSign=0<application.state.statusBarY?Lang.application.coordNorth:Lang.application.coordSouth,XSign=0<application.state.statusBarX?Lang.application.coordEast:Lang.application.coordWest,digits=application.state.isPlanar?2:6,`${application.state.statusBarX.toFixed(digits)} ${XSign} ,  ${application.state.statusBarY.toFixed(digits)} `+YSign),$("#searchInputID").val(searchText),$("#searchInputID").focus()}catch(err){application.errorHandling(err.message,0)}},dummy:null};